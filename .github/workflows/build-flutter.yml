name: build-flutter

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-android-and-web:
    runs-on: ubuntu-latest
    name: Build for Android / Web
    steps:
      - name: Checks-out my repository
        uses: actions/checkout@v2

      - name: Install Flutter 3.19.1
        run: git clone https://github.com/flutter/flutter.git -b 3.19.1

      - name: Add path
        run: echo "$(pwd)/flutter/bin" >> $GITHUB_PATH

      - name: Flutter version
        run: flutter --version

      - name: Download Flutter packages
        run: flutter pub get

      - name: Build Android
        run: flutter build apk

      - name: Upload apk to Artifact
        uses: actions/upload-artifact@v1
        with:
          name: apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Build Web
        run: flutter build web

      - name: Upload web to Artifact
        uses: actions/upload-artifact@v1
        with:
          name: web
          path: build/web

      # Secrets からrelease.jks を生成
      # - name: Create release.jks
      #   run: echo -n ${{ secrets.ANDROID_KEY_JKS }} | base64 -d > android/release.jks # -n で改行を消している

      # Secrets から service-account-ke.json を生成
      # - name: Create release.jks
      #   run: echo -n ${{ secrets.SERVICE_ACCOUNT_KEY_JSON }} | base64 -d > android/service-account-ke.json

      # Secrets から key.properties を生成
      # key.properties には各種シークレットな文字列なり file name なりを渡している
      # - name: Create key.properties
      # # > android/key.properties で 上書き
      # # >> android/key.properties で　追加
      #   run: |
      #     echo 'storeFile=release.jks' > android/key.properties
      #     echo 'serviceAccountFile=service-account-ke.json' >> android/key.properties
      #     echo 'storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}' >> android/key.properties
      #     echo 'keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}' >> android/key.properties
      #     echo 'keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}' >> android/key.properties

      # App Bundle を生成
      # - name: Building Android AppBundle
      #   run: flutter build appbundle --build-number ${GITHUB_RUN_NUMBER} # build-number には run_number を渡している
      #   # ToDo: version-number や build-number は外部ファイルを参照するようにしたい

      # gradle-play-publisher で アップロード
      # https://github.com/Triple-T/gradle-play-publisher この外部パッケージを活用している
      # - name: Upload to GooglePlayStore
      #   run: ./gradlew publishReleaseBundle
      #   working-directory: ./android

  build-ios:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract App Store Connect API Private Key in ./private_keys
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_API_AUTHKEY_P8_BASE64 }}
        run: |
          mkdir ./private_keys
          echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode --output ./private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Install Flutter 3.19.1
        run: git clone https://github.com/flutter/flutter.git -b 3.19.1

      - name: Flutter version
        run: flutter --version

      - name: Run flutter pub get
        run: flutter pub get

      - name: Run flutter build
        id: build
        run: flutter build ios --release --no-codesign

      - name: Archive by xcodebuild
        env:
            APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
            APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: xcodebuild archive CODE_SIGNING_ALLOWED=NO -workspace ./ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath ./build/ios/Runner.xcarchive

      - name: Export by xcodebuild
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: xcodebuild -exportArchive -archivePath ./build/ios/Runner.xcarchive -exportPath ./build/ios/ipa -exportOptionsPlist ./ios/ExportOptions.plist -allowProvisioningUpdates -authenticationKeyIssuerID $APPLE_API_ISSUER_ID -authenticationKeyID $APPLE_API_KEY_ID -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Detect path for ipa file
        run: |
          echo "IPA_PATH=$(find build/ios/ipa -type f -name '*.ipa')" >> $GITHUB_ENV

      - name: Upload to App Store Connect
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: xcrun altool --upload-app --type ios -f $IPA_PATH --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_ISSUER_ID