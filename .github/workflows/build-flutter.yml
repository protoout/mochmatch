name: build-flutter

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-android-and-web:
    runs-on: ubuntu-latest
    name: Build for Android / Web
    steps:
      - name: Checks-out my repository
        uses: actions/checkout@v2

      - name: Install Flutter
        run: git clone https://github.com/flutter/flutter.git

      - name: Add path
        run: echo "$(pwd)/flutter/bin" >> $GITHUB_PATH

      - name: Download Flutter packages
        run: flutter pub get

      - name: Build Android
        run: flutter build apk

      - name: Upload apk to Artifact
        uses: actions/upload-artifact@v1
        with:
          name: apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Build Web
        run: flutter build web

      - name: Upload web to Artifact
        uses: actions/upload-artifact@v1
        with:
          name: web
          path: build/web

      # Secrets からrelease.jks を生成
      # - name: Create release.jks
      #   run: echo -n ${{ secrets.ANDROID_KEY_JKS }} | base64 -d > android/release.jks # -n で改行を消している

      # Secrets から service-account-ke.json を生成
      # - name: Create release.jks
      #   run: echo -n ${{ secrets.SERVICE_ACCOUNT_KEY_JSON }} | base64 -d > android/service-account-ke.json

      # Secrets から key.properties を生成
      # key.properties には各種シークレットな文字列なり file name なりを渡している
      # - name: Create key.properties
      # # > android/key.properties で 上書き
      # # >> android/key.properties で　追加
      #   run: |
      #     echo 'storeFile=release.jks' > android/key.properties
      #     echo 'serviceAccountFile=service-account-ke.json' >> android/key.properties
      #     echo 'storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}' >> android/key.properties
      #     echo 'keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}' >> android/key.properties
      #     echo 'keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}' >> android/key.properties

      # App Bundle を生成
      # - name: Building Android AppBundle
      #   run: flutter build appbundle --build-number ${GITHUB_RUN_NUMBER} # build-number には run_number を渡している
      #   # ToDo: version-number や build-number は外部ファイルを参照するようにしたい

      # gradle-play-publisher で アップロード
      # https://github.com/Triple-T/gradle-play-publisher この外部パッケージを活用している
      # - name: Upload to GooglePlayStore
      #   run: ./gradlew publishReleaseBundle
      #   working-directory: ./android
  build-ios:
    name: Build for iOS
    runs-on: macos-latest

    steps:
      - name: Checks-out my repository
        uses: actions/checkout@v2

      - name: Install Flutter 3.13.7
        run: |
          echo "git clone https://github.com/flutter/flutter.git"
          git clone https://github.com/flutter/flutter.git
          echo "git -C ./flutter checkout 3.13.7"
          git -C ./flutter checkout 3.13.7
          echo "git -C ./flutter status"
          git -C ./flutter status

      - name: Add path
        run: echo "$(pwd)/flutter/bin" >> $GITHUB_PATH

      - name: Download Flutter packages
        run: flutter pub get

      - name: Build iOS
        run: flutter build ios --debug --no-codesign

      - name: Upload app to Artifact
        uses: actions/upload-artifact@v1
        with:
          name: app
          path: build/ios/iphoneos/Runner.app

      # # 証明書の生成
      # - name: Import Provisioning Profile
      #   run: | # 複数行の run を書きたい場合はこうする 以下、Provisioning Profilesを置くべきディレクトリにデコードしている
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision

      # # 署名をする
      # - name: Import Code-Signing Certificates
      #   uses: Apple-Actions/import-codesign-certs@v1 # 外部パッケージを使っている
      #   with:
      #     p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
      #     p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

      # # ipa ファイルの出力
      # - name: Create ipa file
      #   # GITHUB_RUN_NUMBER をビルドナンバーに指定することで被りがないようにしている。
      #   run: flutter build ipa --export-options-plist=ExportOptions.plist --build-number ${GITHUB_RUN_NUMBER}

      # # AppStoreConnect にアップロードする
      # - name: Upload to AppStoreConnect
      #   run: xcrun altool --upload-app -f "./build/ios/ipa/github_actios_sample.ipa" -u "${{ secrets.APPLE_ID }}" -p "${{ secrets.APPLE_APP_PASS }}"
